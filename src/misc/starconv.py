
# Copyright (C) 2003-2011 Victor Semionov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#  * Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#  * Neither the name of the copyright holder nor the names of the contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import sys
import bisect


# Related articles:
# http://home.comcast.net/~erniew/astro/tycho.html
# http://www.astro-tom.com/technical_data/magnitude_scale.htm
# http://home.comcast.net/~erniew/astro/almagest.html
# http://svs.gsfc.nasa.gov/vis/a000000/a003500/a003572/index.html
# http://www.vendian.org/mncharity/dir3/starcolor/details.html
# http://www.fourmilab.ch/documents/specrend/


header = """\
//Stars file, generated by starconv
// using the Yale Bright Star Catalog
//
//NOTE: THE STARS MUST BE SORTED BY MAGNITUDE IN DESCENDING ORDER!!!
//
//Format:
//number of stars
//star line 1
//star line 2
//...........
//
//Star line format: (separator=='|')
//Dec, degrees [-90:90]
//RA, degrees [0:360)
//SEPARATOR
//magnitude, mag
//SEPARATOR
//red color component [0:1]
//green color component [0:1]
//blue color component [0:1]

"""

fields = {
            "DE-": (84,),
            "DEd": (85, 86),
            "DEm": (87, 88),
            "DEs": (89, 90),
            "RAh": (76, 77),
            "RAm": (78, 79),
            "RAs": (80, 83),
            "Vmag": (103, 107),
            "B-V": (110, 114)
            }

bv_html = (
            (-0.40, 0x9bb2ff), (-0.35, 0x9eb5ff), (-0.30, 0xa3b9ff), (-0.25, 0xaabfff), (-0.20, 0xb2c5ff), (-0.15, 0xbbccff), (-0.10, 0xc4d2ff), (-0.05, 0xccd8ff),
            ( 0.00, 0xd3ddff), ( 0.05, 0xdae2ff), ( 0.10, 0xdfe5ff), ( 0.15, 0xe4e9ff), ( 0.20, 0xe9ecff), ( 0.25, 0xeeefff), ( 0.30, 0xf3f2ff), ( 0.35, 0xf8f6ff),
            ( 0.40, 0xfef9ff), ( 0.45, 0xfff9fb), ( 0.50, 0xfff7f5), ( 0.55, 0xfff5ef), ( 0.60, 0xfff3ea), ( 0.65, 0xfff1e5), ( 0.70, 0xffefe0), ( 0.75, 0xffeddb),
            ( 0.80, 0xffebd6), ( 0.85, 0xffe9d2), ( 0.90, 0xffe8ce), ( 0.95, 0xffe6ca), ( 1.00, 0xffe5c6), ( 1.05, 0xffe3c3), ( 1.10, 0xffe2bf), ( 1.15, 0xffe0bb),
            ( 1.20, 0xffdfb8), ( 1.25, 0xffddb4), ( 1.30, 0xffdbb0), ( 1.35, 0xffdaad), ( 1.40, 0xffd8a9), ( 1.45, 0xffd6a5), ( 1.50, 0xffd5a1), ( 1.55, 0xffd29c),
            ( 1.60, 0xffd096), ( 1.65, 0xffcc8f), ( 1.70, 0xffc885), ( 1.75, 0xffc178), ( 1.80, 0xffb765), ( 1.85, 0xffa94b), ( 1.90, 0xff9523), ( 1.95, 0xff7b00),
            ( 2.00, 0xff5200)
            )

bv_rgb = tuple([(bv, (html>>16, html>>8&0xff, html&0xff)) for (bv, html) in bv_html])
bv_list, rgb_list = zip(*bv_rgb)

stars = []


class Star:
    def __init__(self):
        self.dec = 0.0
        self.ra = 0.0
        self.mag = 0.0
        self.color = (0.0, 0.0, 0.0)


def usage():
    print("Usage: starconv.py catalog starmap", file=sys.stderr)

def valid_line(line):
    return line[fields["Vmag"][0]-1+2] == '.'

def parse_field(line, field):
    byte_range = fields[field]
    if len(byte_range) == 2:
        index1 = byte_range[0] - 1
        index2 = byte_range[1]
        return float(line[index1:index2])
    else:
        index = byte_range[0] - 1
        return float(line[index] + "1")

def find_bv1(bv):
    i = bisect.bisect_right(bv_list, bv)
    return max(i - 1, 0)

def find_bv2(bv):
    i = bisect.bisect_left(bv_list, bv)
    return min(i, len(bv_list) - 1)

def calc_color(bv):
    c3 = range(3)

    index1, index2 = find_bv1(bv), find_bv2(bv)
    if index1 == index2:
        rgb = rgb_list[index1]
    else:
        bv1, bv2 = bv_list[index1], bv_list[index2]
        rgb1, rgb2 = rgb_list[index1], rgb_list[index2]

        deltabv = bv2 - bv1
        rgb_der = [(rgb2[c] - rgb1[c])/deltabv for c in c3]

        dbv = bv - bv1
        rgb = [rgb1[c] + rgb_der[c] * dbv for c in c3]

    cmax = max(rgb)
    rgb = [rgb[c]/cmax for c in c3]

    return tuple(rgb)

def parse(line):
    if not valid_line(line):
        return None
    star = Star()
    star.dec = parse_field(line, "DE-") * (parse_field(line, "DEd") + parse_field(line, "DEm")/60 + parse_field(line, "DEs")/3600)
    star.ra = 15 * (parse_field(line, "RAh") + parse_field(line, "RAm")/60 + parse_field(line, "RAs")/3600)
    star.mag = parse_field(line, "Vmag")
    try:
        bv = parse_field(line, "B-V")
    except ValueError:
        bv = 0.0 # light blue if B-V is not specified
    star.color = calc_color(bv)
    return star


if len(sys.argv) != 3:
    usage()
    sys.exit(1)

print("reading and parsing input data...")
catalog = open(sys.argv[1], "rt")
for line in catalog:
    line = line.strip('\n')
    star = parse(line)
    if star is not None:
        stars.append(star)
catalog.close()

print("sorting...")
stars.sort(key=lambda star: star.mag, reverse=True)

print("writing output data...")
starmap = open(sys.argv[2], "wt")
starmap.write(header)
starmap.write(str(len(stars)) + "\n")
for star in stars:
    line = "{} {} | {} | {} {} {}\n".format(star.dec, star.ra, star.mag, star.color[0], star.color[1], star.color[2])
    starmap.write(line)
starmap.close()

print("done.")
